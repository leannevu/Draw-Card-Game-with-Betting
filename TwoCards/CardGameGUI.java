package TwoCards;

import java.awt.Toolkit;
import java.awt.print.PrinterException;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Iterator;
import java.util.Scanner;
import java.util.StringTokenizer;
import java.util.TreeSet;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.showConfirmDialog;
import javax.swing.JTextArea;
import javax.swing.filechooser.FileNameExtensionFilter;

/**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 *<pre>
 * Class        CardGameGUI.java
 * Project      Project3--CardGame
 * Description  A class representing the GUI used in a maintaining a players
 *              database obtained from a text file, Players.txt with 3 fields:
 *              player name, age, and balance while also playing two cards game
 *              which can bet or not bet. Some functionalities include: viewing
 *              of the data for selected player, add, delete, edit, search for specific 
 *              player. If player wins, they win 20 times their bet.
 * File         CardGameGUI.java
 * Platform     jdk 1.8.0_214; NetBeans IDE 11.3; Windows 10
 * Course       CS 142, Edmonds Community College
 * Hours        25 hours
 * Date         3/5/2021 
 *
 * @author	<i>Leanne Vu</i>
 * @version 	%1% %2%
 * @see     	javax.swing.JFrame
 * @see         java.awt.Toolkit
 * @see         java.util.TreeSet
 *</pre>
 *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
public class CardGameGUI extends javax.swing.JFrame {
    private String fileName = "src/TwoCards/Players.txt";
    private TreeSet<Player> players = new TreeSet<Player>(); //Tree set datatype that will be used to save Player objects
    DeckOfCards myDeck = new DeckOfCards();
    private StringBuilder output = new StringBuilder();
    private DecimalFormat dollars = new DecimalFormat("$#,##0.00");
    
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~x~~~~~~~~
     *<pre>
     * Constructor     CardGameGUI()-default constructor
     * Description     Create an instance of the CardGameGUI class
     * Date            3/5/2021
     * @author         <i>Leanne Vu</i>
     *</pre>
     *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    public CardGameGUI() {
        initComponents();
        this.getRootPane().setDefaultButton(drawJButton);
        this.setIconImage(Toolkit.getDefaultToolkit().getImage(
                "src/Cards/Joker.jpg"));
        // center the application
        setLocationRelativeTo(null);
        //Read form an external text file Players.txt and populate the TreeSet of player names then display
        readFromFile(fileName);
        displayPlayers();
        //Show data for the selected player based on the playersJList index
        int index = playersJList.getSelectedIndex();
        if (index >=0)
            showPlayersData(playersJList.getSelectedIndex());
        setDate();  //call a private method to set date in title bar
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        card1JLabel = new javax.swing.JLabel();
        card2JLabel = new javax.swing.JLabel();
        titleJLabel = new javax.swing.JLabel();
        clearJButton = new javax.swing.JButton();
        drawJButton = new javax.swing.JButton();
        instructionsJPanel = new javax.swing.JPanel();
        instructionsJScrollPane = new javax.swing.JScrollPane();
        instructionsJTextArea = new javax.swing.JTextArea();
        playersJPanel = new javax.swing.JPanel();
        playersJScrollPane = new javax.swing.JScrollPane();
        playersJList = new javax.swing.JList();
        resultsJPanel = new javax.swing.JPanel();
        resultsJScrollPane = new javax.swing.JScrollPane();
        resultsJTextArea = new javax.swing.JTextArea();
        betJLabel = new javax.swing.JLabel();
        betJTextField = new javax.swing.JTextField();
        jMenuBar = new javax.swing.JMenuBar();
        fileJMenu = new javax.swing.JMenu();
        newJMenuItem = new javax.swing.JMenuItem();
        printJMenuItem = new javax.swing.JMenuItem();
        printFormJMenuItem = new javax.swing.JMenuItem();
        saveJMenuItem = new javax.swing.JMenuItem();
        exitJMenuItem = new javax.swing.JMenuItem();
        playersDatabaseJMenu = new javax.swing.JMenu();
        addJMenuItem = new javax.swing.JMenuItem();
        editJMenuItem = new javax.swing.JMenuItem();
        deleteJMenuItem = new javax.swing.JMenuItem();
        searchJMenuItem = new javax.swing.JMenuItem();
        detailsJMenuItem = new javax.swing.JMenuItem();
        helpJMenu = new javax.swing.JMenu();
        aboutJMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Two Cards Game");
        setResizable(false);

        card1JLabel.setFont(new java.awt.Font("Tahoma", 2, 24)); // NOI18N
        card1JLabel.setForeground(new java.awt.Color(51, 0, 0));
        card1JLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Cards/Joker.jpg"))); // NOI18N

        card2JLabel.setFont(new java.awt.Font("Tahoma", 2, 24)); // NOI18N
        card2JLabel.setForeground(new java.awt.Color(51, 0, 0));
        card2JLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Cards/Joker.jpg"))); // NOI18N

        titleJLabel.setFont(new java.awt.Font("Tempus Sans ITC", 2, 30)); // NOI18N
        titleJLabel.setForeground(new java.awt.Color(51, 0, 0));
        titleJLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleJLabel.setText("Welcome to Two Cards Game");

        clearJButton.setText("Clear");
        clearJButton.setToolTipText("Click to end and clear game");
        clearJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearJButtonActionPerformed(evt);
            }
        });

        drawJButton.setText("Draw Cards");
        drawJButton.setToolTipText("Click to start game");
        drawJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drawJButtonActionPerformed(evt);
            }
        });

        instructionsJPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Instructions", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 21), new java.awt.Color(51, 0, 0))); // NOI18N
        instructionsJPanel.setForeground(new java.awt.Color(51, 0, 0));

        instructionsJTextArea.setEditable(false);
        instructionsJTextArea.setColumns(20);
        instructionsJTextArea.setLineWrap(true);
        instructionsJTextArea.setRows(5);
        instructionsJTextArea.setText("Enter amount willing to bet in order to play this game: two cards are drawn randomly without replacement. If they are the same value you win 20 times your bet; else you lose your bet. Click on draw cards when ready. NOTE: It is ok to not bet.");
        instructionsJTextArea.setToolTipText("Instruction on Two Cards game");
        instructionsJTextArea.setWrapStyleWord(true);
        instructionsJScrollPane.setViewportView(instructionsJTextArea);

        javax.swing.GroupLayout instructionsJPanelLayout = new javax.swing.GroupLayout(instructionsJPanel);
        instructionsJPanel.setLayout(instructionsJPanelLayout);
        instructionsJPanelLayout.setHorizontalGroup(
            instructionsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(instructionsJScrollPane)
        );
        instructionsJPanelLayout.setVerticalGroup(
            instructionsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(instructionsJScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        playersJPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Players", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 21), new java.awt.Color(51, 0, 0))); // NOI18N

        playersJList.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        playersJList.setToolTipText("List of players is given");
        playersJList.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                playersJListPropertyChange(evt);
            }
        });
        playersJList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                playersJListValueChanged(evt);
            }
        });
        playersJScrollPane.setViewportView(playersJList);

        javax.swing.GroupLayout playersJPanelLayout = new javax.swing.GroupLayout(playersJPanel);
        playersJPanel.setLayout(playersJPanelLayout);
        playersJPanelLayout.setHorizontalGroup(
            playersJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(playersJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(playersJScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE)
                .addContainerGap())
        );
        playersJPanelLayout.setVerticalGroup(
            playersJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, playersJPanelLayout.createSequentialGroup()
                .addComponent(playersJScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE)
                .addContainerGap())
        );

        resultsJPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Results", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 21), new java.awt.Color(51, 0, 0))); // NOI18N

        resultsJTextArea.setEditable(false);
        resultsJTextArea.setColumns(20);
        resultsJTextArea.setLineWrap(true);
        resultsJTextArea.setRows(5);
        resultsJTextArea.setToolTipText("Information of players is given");
        resultsJTextArea.setWrapStyleWord(true);
        resultsJScrollPane.setViewportView(resultsJTextArea);

        javax.swing.GroupLayout resultsJPanelLayout = new javax.swing.GroupLayout(resultsJPanel);
        resultsJPanel.setLayout(resultsJPanelLayout);
        resultsJPanelLayout.setHorizontalGroup(
            resultsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(resultsJScrollPane)
        );
        resultsJPanelLayout.setVerticalGroup(
            resultsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(resultsJPanelLayout.createSequentialGroup()
                .addComponent(resultsJScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 77, Short.MAX_VALUE)
                .addContainerGap())
        );

        betJLabel.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        betJLabel.setText("What is your bet:");

        betJTextField.setToolTipText("Bet placement here");

        fileJMenu.setText("File");
        fileJMenu.setToolTipText("Exit the form");

        newJMenuItem.setText("New");
        newJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newJMenuItemActionPerformed(evt);
            }
        });
        fileJMenu.add(newJMenuItem);

        printJMenuItem.setText("Print");
        printJMenuItem.setToolTipText("Print information of selected player");
        printJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printJMenuItemActionPerformed(evt);
            }
        });
        fileJMenu.add(printJMenuItem);

        printFormJMenuItem.setText("Print Form");
        printFormJMenuItem.setToolTipText("Print the interface");
        printFormJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printFormJMenuItemActionPerformed(evt);
            }
        });
        fileJMenu.add(printFormJMenuItem);

        saveJMenuItem.setText("Save");
        saveJMenuItem.setToolTipText("Save the players list!");
        saveJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveJMenuItemActionPerformed(evt);
            }
        });
        fileJMenu.add(saveJMenuItem);

        exitJMenuItem.setText("Exit");
        exitJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitJMenuItemActionPerformed(evt);
            }
        });
        fileJMenu.add(exitJMenuItem);

        jMenuBar.add(fileJMenu);

        playersDatabaseJMenu.setText("Players Database");

        addJMenuItem.setText("Add new player");
        addJMenuItem.setToolTipText("Add player");
        addJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addJMenuItemActionPerformed(evt);
            }
        });
        playersDatabaseJMenu.add(addJMenuItem);

        editJMenuItem.setText("Edit player");
        editJMenuItem.setToolTipText("Edit player");
        editJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editJMenuItemActionPerformed(evt);
            }
        });
        playersDatabaseJMenu.add(editJMenuItem);

        deleteJMenuItem.setText("Delete player");
        deleteJMenuItem.setToolTipText("Delete player");
        deleteJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteJMenuItemActionPerformed(evt);
            }
        });
        playersDatabaseJMenu.add(deleteJMenuItem);

        searchJMenuItem.setText("Search player");
        searchJMenuItem.setToolTipText("Search for player");
        searchJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchJMenuItemActionPerformed(evt);
            }
        });
        playersDatabaseJMenu.add(searchJMenuItem);

        detailsJMenuItem.setText("Player details");
        detailsJMenuItem.setToolTipText("Details of selected player in players list");
        detailsJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                detailsJMenuItemActionPerformed(evt);
            }
        });
        playersDatabaseJMenu.add(detailsJMenuItem);

        jMenuBar.add(playersDatabaseJMenu);

        helpJMenu.setText("Help");

        aboutJMenuItem.setText("About");
        aboutJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutJMenuItemActionPerformed(evt);
            }
        });
        helpJMenu.add(aboutJMenuItem);

        jMenuBar.add(helpJMenu);

        setJMenuBar(jMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(clearJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(74, 74, 74)
                        .addComponent(drawJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(instructionsJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(card2JLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(card1JLabel)))))
                .addGap(18, 32, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(playersJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(betJLabel)
                        .addGap(18, 18, 18)
                        .addComponent(betJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19))
                    .addComponent(resultsJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(25, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(136, 136, 136)
                .addComponent(titleJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 403, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(titleJLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(betJLabel)
                            .addComponent(betJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(playersJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(resultsJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(card1JLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(card2JLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(drawJButton)
                            .addComponent(clearJButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(instructionsJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
   /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    *<pre>
    * Method        setDate()
    * Description   Private method to set current date in the title bar of main
    *               form in mm/dd/yyyy style
    * @author       <i>Leanne Vu</i>
    * Date          3/5/2021
    * @see          java.text.DateFormat
    * @see          java.text.SimpleDateFormat
    * @see          java.util.Date
    *</pre>
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void setDate() {
        DateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
        Date date = new Date();
        
        //Include date (including format) in title
        this.setTitle("Project 3-- Two Cards Game--" + dateFormat.format(date));
    }
    
   /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       readFromFile
     * Description  Reads players from a text file that is comma delimited and
     *              creates an instance of the Player class with the data read.
     *              Read players from an external file and save the Player object
     *              into a TreeSet data type.
     * @author      <i>Leanne Vu</i>
     * Date         1/25/2021
     * @param       file String
     * @see         java.util.Scanner
     *</pre>   
     *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void readFromFile(String fileName){
        //Clear TreeSet and JList
        players.clear(); playersJList.removeAll();
        //check if there is data
        try {
            //read while there is data
            Scanner input = new Scanner (new File(fileName));
            String line = "";
            Player inf = null ;
            
            while (input.hasNextLine()){
                line = input.nextLine();
                inf = new Player(); //create a inf 
                StringTokenizer stringTokenizer = new StringTokenizer(line, ",");
                // create an array of String using split method
                while(stringTokenizer.hasMoreElements()) { //String the file names
                    inf.setName(stringTokenizer.nextElement().toString());
                    inf.setAge(Integer.parseInt(stringTokenizer.nextElement().toString()));
                    inf.setBalance(Double.parseDouble(stringTokenizer.nextElement().toString()));
                }
            //add information to the players TreeSet
                players.add(inf);
            }
            input.close();
        } 
        catch (FileNotFoundException e){
              JOptionPane.showMessageDialog(null, "File Does Not Exit",
                    "File Input Error", JOptionPane.WARNING_MESSAGE);
            //Bring up JFileChooser chooser to select file in current directory
            JFileChooser chooser = new JFileChooser("src/Operas");
            //Filter only txt files
            FileNameExtensionFilter filter = new FileNameExtensionFilter("Txt Files", "txt");
            chooser.setFileFilter(filter);
            
            int choice = chooser.showOpenDialog(null);
            //return value if say yes or ok
            if(choice == JFileChooser.APPROVE_OPTION){
                File chosenFile = chooser.getSelectedFile();
                fileName = "src/Player/"+ chosenFile.getName();
                readFromFile(fileName);
            } else{
                JOptionPane.showMessageDialog(null, "Unable to read file", 
                        "File Input Error", JOptionPane.WARNING_MESSAGE);
                System.exit(0);
            } //weird I/O error
        }
    }
    
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>>
     * Method       displayPlayers()
     * Description  Displays players in JList. Iterates the players TreeSet
     *              to copy names onto array of playersList which will be used
     *              to set the JList.
     * @author      <i>Leanne Vu</i>
     * Date         1/25/2021
     * </pre>
     *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void displayPlayers(){
        int position = playersJList.getSelectedIndex(); // get index of current players
        String[] playersList = new String[players.size()]; //array used to display names

        //loop through the TreeSet to find player names and copying it into
        //an array that the playersJList will use to display names on playersJList
        for ( int index = 0; index < players.size(); index++){
            playersList[index] = iterateForName(index);
        }

        //use the newly populated array (playersJList) to populate JList with names
        playersJList.setListData(playersList); //populate Jlist
        if (position < 0)
            playersJList.setSelectedIndex(0);
        else 
            playersJList.setSelectedIndex(position);
    }
    
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       iterateForName
     * Description  Returns the name of the selected instance/player 
     *              based on the given index (which replicates the player on the 
     *              index of the playersJList). Accesses the Player objects
     *              through the TreeSet datastructure using iteration and copies
     *              names on an array for flexible access. 
     * @author      <i>Leanne Vu</i>
     * Date         3/5/2021
     * @param       index int
     *</pre>   
     *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
     private String iterateForName(int index) {
        //create arrays that will be used for iteration
        String[] playersName = new String[players.size()]; //array used to display names
        //iterate through the TreeSet to find player names
        //array will be a tool that will be used to display information
        Iterator iterator = players.iterator();
        Player aPlayer = null;
        int x = 0;
        while (iterator.hasNext()) {
            aPlayer = (Player)iterator.next();
            //array copies name of each player which will be used for access 
            playersName[x] = aPlayer.getName();
            x++;
        }
        return playersName[index];  
    }
    
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       iterateForAge
     * Description  Returns the age of the selected instance/player 
     *              based on the given index (which replicates the player on the 
     *              index of the playersJList). Accesses the Player objects
     *              through the TreeSet datastructure using iteration and copies
     *              age on an array for flexible access. 
     * @author      <i>Leanne Vu</i>
     * Date         3/5/2021
     * @param       index int
     *</pre>   
     *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private int iterateForAge(int index) {
        //create arrays that will be used for iteration
        Integer[] playersAge = new Integer[players.size()]; //array used to display names
        
        //iterate through the TreeSet to find player names
        //array will be a tool that will be used to display information
        Iterator iterator = players.iterator();
        Player aPlayer = null;
        int x = 0;
        while (iterator.hasNext()) {
            aPlayer = (Player)iterator.next();
            //array copies age of each player which will be used for access 
            playersAge[x] = aPlayer.getAge();
            x++;
       }
        //returns age of the index passed via paramter
        return playersAge[index];  
    }
    
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       iterateForBalance
     * Description  Returns the balance of the selected instance/player 
     *              based on the given index (which replicates the player on the 
     *              index of the playersJList). Accesses the Player objects
     *              through the TreeSet datastructure using iteration and copies
     *              balance on an array for flexible access. 
     * @author      <i>Leanne Vu</i>
     * Date         3/5/2021
     * @param       index int
     *</pre>   
     *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private double iterateForBalance(int index) {
        //create arrays that will be used for iteration
        Double[] playersBalance = new Double[players.size()]; //array used to display names
        
        //iterate through the TreeSet to find player names
        //array will be a tool that will be used to display information
        Iterator iterator = players.iterator();
        Player aPlayer = null;
        int x = 0;
        while (iterator.hasNext()) {
            aPlayer = (Player)iterator.next();
            //array copies balanace of each player which will be used for access 
            playersBalance[x] = aPlayer.getBalance();
            x++;
       }
        //returns balance of the index passed via paramter
        return playersBalance[index];  
    }
    
     /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>>
     * Method       showPlayersData()
     * Description  Display information about selected player based on the
     *              selected player using the selectedValue of playersJList. Uses the
     *              iterateForName, iterateForAge, and iterateForBalance methods
     *              which all share the same index for selected player.
     * @param       index int
     * @author      <i>Leanne Vu</i>
     * Date         3/5/2021
     * </pre>
     *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void showPlayersData(int index){
        //clear output
        output.delete(0, output.length());
        
        //display it to resultsJTextArea based on the player (selected index)
        if (index >=0 && index < players.size()){
            //clear output
            output.delete(0, output.length());
            //Player name, age, and balance
            output.append("Player: " + iterateForName(index) + 
                    "\n" + iterateForAge(index) + " years old \n" +
                    "Balance = " + iterateForBalance(index));
            //set the resulstsJTextArea to the created string
            resultsJTextArea.setText(output.toString());
        }
    }
        
   /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       searchPlayer
     * Description  Search player by name and return Player object.
     * @param       playerName String
     * @author      <i>Leanne Vu</i>
     * Date         3/7/2021
     * </pre>
     *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/ 
    private Player searchPlayer(String playerName) {
        if ((playerName != null) && (playerName.length() > 0)) {
            boolean found = false;
            Player aPlayer = null;
            //iterate through the TreeSet to find player searching by names only
            Iterator iterator = players.iterator();
            while (iterator.hasNext() && !found) {
                aPlayer = (Player)iterator.next(); //object assigned to Player variable each iteration
                if(aPlayer.getName().toLowerCase().contains(playerName.toLowerCase())) {
                   found = true; //if name passed via parameter equals to object playerName, then the object has been found
                   return aPlayer;
                }
            }
        } 
        return null;
        
    }
    
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    *<pre>
    *	Method		clearJButtonActionPerformed()
    *	Description     Event Handler to that ends current game, redisplays
    *                   original pictures, enables menus again, and updates
    *                   the JList.  
    *   @param          label JLabel
    *   @param          path String
    *   @param          num String
    *	@author         <i>Leanne Vu</i>
    *	Date            3/8/2021
    *   history log
    *</pre>
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/ 
    private void clearJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearJButtonActionPerformed
        //shuffle cards again
        this.myDeck.shuffle();
        
        //set images back to original
        setImage(card1JLabel, "src/Cards/" , "Joker");
        setImage(card2JLabel, "src/Cards/" , "Joker");
        playersJList.setSelectedIndex(0); //sets focus back to first player
        
        //enables event handlers that were disabled during game
        drawJButton.setEnabled(true);
        playersJList.setEnabled(true);
        saveJMenuItem.setEnabled(true);
        addJMenuItem.setEnabled(true);
        deleteJMenuItem.setEnabled(true);
        editJMenuItem.setEnabled(true);
        searchJMenuItem.setEnabled(true);
        newJMenuItem.setEnabled(true);
        detailsJMenuItem.setEnabled(true);
        betJTextField.setText("");
        
        //update playersJList
        displayPlayers();
    }//GEN-LAST:event_clearJButtonActionPerformed
   /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    *<pre>
    *	Method		setImage()
    *	Description     Method made so creating images with multiple files would
    *                   be much more convenient. With an array, this allows 
    *                   the face of the cards to visually show up for the user
    *                   to see what card they are dealing with. 
    *   @param          label JLabel
    *   @param          path String
    *   @param          num String
    *	@author         <i>Leanne Vu</i>
    *	Date            3/8/2021
    *   history log
    *</pre>
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/ 
        public void setImage(JLabel label, String path, String num) {
        String image = path + num + ".jpg";
        label.setIcon(new ImageIcon(image));
    }
    
 /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>>
     * Method       showPlayersResults()
     * Description  Method used in drawJButton to display information about their
     *              result after each draw. Does not matter if the balanced
     *              is changed or not.
     * @param       aPlayer Player
     * @param       gameResult boolean
     * @author      <i>Leanne Vu</i>
     * Date         3/5/2021
     * </pre>
     *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void showPlayersResults(Player aPlayer, boolean gameResult){
        //clear output
        output.delete(0, output.length());
        String result;
        if (gameResult)
            result = "You WON!";
        else
            result = "You LOST!";
        
        //display it to resultsJTextArea based on the player (selected index)
            //clear output
            output.delete(0, output.length());
            //Player name, age, and balance
            output.append(result + " " + aPlayer.getName() +
                    "\nCurrent balance = " + dollars.format(aPlayer.getBalance()) +
                    "\n\n**CLICK CLEAR TO END GAME");
            //set the resulstsJTextArea to the created string
            resultsJTextArea.setText(output.toString());
    }
    
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>>
     * Method       changeBalance()
     * Description  Method used in drawJButton() to change and update balance 
     *              of selected user based on the game result (if two cards matched). 
     * @param       balance double
     * @param       gameResult boolean
     * @author      <i>Leanne Vu</i>
     * Date         3/5/2021
     * </pre>
     *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void changeBalance(double balance, boolean gameResult, Player aPlayer){
        double newBalance = aPlayer.getBalance();
        if (gameResult) {
            newBalance += (20 * balance);
        } else {
            newBalance -= balance;
        }
        
        aPlayer.setBalance(newBalance);
    }
    
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>>
     * Method       drawJButtonActionPerformed()
     * Description  Disables enabled feature of event handlers, displays 
     *              two cards per draw, checks for a match in a suite, changes
     *              balance when necessary, and displays end result. Let's
     *              user know when they can't draw anymore.
     * @author      <i>Leanne Vu</i>
     * Date         3/5/2021
     * </pre>
     *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void drawJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drawJButtonActionPerformed
        //disable control menus (so player can focus on game)
        playersJList.setEnabled(false);
        saveJMenuItem.setEnabled(false);
        addJMenuItem.setEnabled(false);
        deleteJMenuItem.setEnabled(false);
        editJMenuItem.setEnabled(false);
        searchJMenuItem.setEnabled(false);
        newJMenuItem.setEnabled(false);
        detailsJMenuItem.setEnabled(false);
        
        //variable declarations
        Player aPlayer = searchPlayer(iterateForName(playersJList.getSelectedIndex())); //used to return object of player playing game
        boolean won; //value used for whether player won or not
        
        if(this.myDeck.checkNoMoreCards()) { //returns true if all cards have been used
            drawJButton.setEnabled(false);
            //change balance if there is a bet input and show results after draw
            resultsJTextArea.setText(iterateForName(playersJList.getSelectedIndex()) 
                    + "\nSorry, you cannot draw- YOU ARE OUT OF CARDS! "
                            + "Please click clear to end game");
            setImage(card1JLabel, "src/Cards/" , "Joker");
            setImage(card2JLabel, "src/Cards/" , "Joker");
            
        } else {
            //Cards and displays the cards through it
            int card1 = this.myDeck.randomCard();
            setImage(card1JLabel, "src/Cards/", String.valueOf(card1));
            int card2 = this.myDeck.randomCard();
            setImage(card2JLabel, "src/Cards/", String.valueOf(card2));
            
            //assign variable true/false depending on whether the card matches
            won = ((card1 % 13) == (card2 % 13)); //mod 13 allows us to give cards that are the same 
                                                  //but in different suites
        
            //change balance if there is a bet input and show results with balance after draw
            if(betJTextField != null && Validation.isDouble(betJTextField.getText())) {
                double betValue = Double.parseDouble(betJTextField.getText());
                //check if bet value will cause player debt to go below 0
                if ((aPlayer.getBalance() - betValue) <= 0) { 
                    resultsJTextArea.setText(iterateForName(playersJList.getSelectedIndex()) 
                    + "\nSorry, you cannot draw- INSUFFICIENT FUNDS! "
                            + "Please click clear to end game");
                    setImage(card1JLabel, "src/Cards/" , "Joker");
                    setImage(card2JLabel, "src/Cards/" , "Joker");
                    drawJButton.setEnabled(false);
                }
                else { //if bet value is fine, change player balance and show results
                    changeBalance(betValue, won, aPlayer);
                    showPlayersResults(aPlayer, won);
                }
            //show results of player after game (bet text field can be empty)
            } else if (betJTextField == null || Validation.isEmpty(betJTextField)){
                showPlayersResults(aPlayer, won);
            //invalid input from bet
            } else { //invalid bet input! don't let player continue
                betJTextField.setToolTipText(betJTextField.getToolTipText()
                       + "--Invalid bet input");
                resultsJTextArea.setText("Sorry, you cannot draw- INVALID BET INPUT!" +
                        " Please click clear to end game");
                drawJButton.setEnabled(false);
                setImage(card1JLabel, "src/Cards/" , "Joker");
                setImage(card2JLabel, "src/Cards/" , "Joker");
        }     
        }
    }//GEN-LAST:event_drawJButtonActionPerformed

    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>>
     * Method       playersJListValueChanged()
     * Description  Event handler for playersJListValueChanged to update
     *              information on selected player. Calls showPlayersData() 
     *              everytime the value changes.
     * @author      <i>Leanne Vu</i>
     * Date         3/5/2021
     * </pre>
     *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/ 
    private void playersJListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_playersJListValueChanged
        //notes whenever the index value for playerJList changes
        int index = (playersJList.getSelectedIndex());
        if (index >= 0) //calls showPlayersData
            showPlayersData(index); 
    }//GEN-LAST:event_playersJListValueChanged

   /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    *<pre>
    * Method        aboutJMenuItemActionPerformed() 
    * Description   Event handler for aboutJMenuItem to show the About form
    * parem         evt ActionEvent
    * @author       <i>Leanne Vu</i>	
    * Date          3/5/2021
    *</pre>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void aboutJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutJMenuItemActionPerformed
        About myAbout = new About(this, true);
        myAbout.setVisible(true);
    }//GEN-LAST:event_aboutJMenuItemActionPerformed

    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>>
     * Method       newJMenuItemActionPerformed()
     * Description  Show a JFileChooser with an OpenDialog to detect a 
     *              different players database.
     * @parem       evt ActionEvent
     * @author      <i>Leanne Vu</i>
     * Date         3/5/2021
     * </pre>
     *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/ 
    private void newJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newJMenuItemActionPerformed
        JFileChooser chooser = new JFileChooser("src/TwoCards");
        //Filter only txt file
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
                "Txt Files", "txt") ;
        chooser.setFileFilter(filter);
        int choice = chooser.showOpenDialog(null);
        if(choice == JFileChooser.APPROVE_OPTION){
        
        //Clear exiting players ArrayList and Jlist
            playersJList.removeAll();
            File chosenFile = chooser.getSelectedFile();
            String file = "src/TwoCards/" + chosenFile.getName();
        
        //need to update fileName to save changes in correct file-- cannot be final
            fileName = file;
            readFromFile(file);   
            displayPlayers();
        } else {
            JOptionPane.showMessageDialog(null,"Unable to read file", "File input Error",
                    JOptionPane.WARNING_MESSAGE);
            }
    }//GEN-LAST:event_newJMenuItemActionPerformed

    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>>
     * Method       printJMenuItem1ActionPerformed()
     * Description  Event handler to print details of selected player by invoking 
     *              printJMenuItem. Uses the iterateForName, iterateForAge, and
     *              iterateForBalance methods by using the index of player.
     * @parem       evt ActionEvent
     * @author      <i>Leanne Vu</i>
     * Date         3/5/2021
     * </pre>
     *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/ 
    private void printJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printJMenuItemActionPerformed
         /// Print selected player
        int index = playersJList.getSelectedIndex(); //detect player through index
        JTextArea printPlayer = new JTextArea(); //the JTextArea creation that will be printed
        if (index >= 0){
            try{
                //Player name, age, and balance
                String output = "Name: " + iterateForName(index) + "\n" +
                        "Age: " + iterateForAge(index) +"\n" +
                        "Balance: " + iterateForAge(index);
                printPlayer.setText(output); //sets printPlayer to the created output
                System.out.println("Printed player: " + output);
                //print the created String (printPlayer)
                printPlayer.print();
            } 
            catch(PrinterException ex){
            JOptionPane.showMessageDialog(null,"Player not printed", "Print Error",
                    JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_printJMenuItemActionPerformed

   /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>>
     * Method       printFormJMenuItemActionPerformed()
     * Description  Event handler for printFormJMenuItemActionPerformed to print
     *              the form as a GUI
     * @parem       evt ActionEvent
     * @author      <i>Leanne Vu</i>
     * Date         3/5/2021
     * </pre>
     *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/ 
    private void printFormJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printFormJMenuItemActionPerformed
        //prints form
        PrintUtilities.printComponent(this);
    }//GEN-LAST:event_printFormJMenuItemActionPerformed

    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method        exitJMenuItemActionPerformed()
     * Description   Call the exitJButtonActionPerformed event handler to exit
     * @param        evt ActionWvent
     * @see          java.awt.event.ActionEvent
     * @author       <i>Leanne Vu</i>
     * Date          3/5/2021
     *</pre>
     *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void exitJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitJMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitJMenuItemActionPerformed

    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method        searchJMenuItemActionPerformed()
     * Description   Searches player by using user input and sets focus on the
     *               selected player. 
     * @param        evt ActionWvent
     * @author       <i>Leanne Vu</i>
     * Date          3/5/2021
     *</pre>
     *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void searchJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchJMenuItemActionPerformed
        String inputName = JOptionPane.showInputDialog ("Enter name of the player: ");
//        int position = playersJList.getSelectedIndex(); // get index of current players

        if (searchPlayer(inputName) != null) { //Check if the returned object is null
            
            //loop through players TreeSet database now that an object has passed to be searchable
            for (int index = 0 ; index < players.size(); index++){ 
                //check if any of the players in database matches the returned object
                if (iterateForName(index).equals(searchPlayer(inputName).getName())) {
                    //highlight the chosen matched object and stop the loop from continuing
                    playersJList.setSelectedIndex(index);
                    break;
                } 
            } 
        } else { // A null object means that the searched item does not match database records-
                JOptionPane.showMessageDialog(null, "Player " + inputName +
                        " not found ", " Search Result", JOptionPane.WARNING_MESSAGE);
                //set index to 0 when nothing else matches
                playersJList.setSelectedIndex(0);
        }
    }//GEN-LAST:event_searchJMenuItemActionPerformed

    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       savePlayers()
     * Description  Write players to a text file that is comma delimited. Uses
     *              iterateForName, iterateForAge, and iterateForBalance 
     *              to get the necessary information of player for it to be saved.
     * @param       file String
     * @author      <i>Leanne Vu</i>
     * Date         1/25/2021
     * </pre>
     *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/ 
    public void savePlayers(String file){
        String limit = ",";
        try{
            FileWriter filePointer = new FileWriter(file,false);
            PrintWriter output = new PrintWriter(filePointer);
            
            //loops through players TreeSet
            for (int index = 0; index < players.size(); index ++) {
                //creates a line for name, age, and balance of player
                String line = iterateForName(index) + limit + 
                        iterateForAge(index) + limit +
                        iterateForBalance(index);
                if ( index  == players.size() - 1)
                    output.write(line);
                else 
                    output.write(line + "\n");
            }
                //finish output writing after each player has gone through saving
                output.close();
        } catch(IOException e){
            JOptionPane.showMessageDialog(null, "Player not Saved", 
                    "Save Error", JOptionPane.WARNING_MESSAGE);
            playersJList.setVisible(true);
            playersJList.setSelectedIndex(0);
        }
    }
    
     /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>>
     * Method       playerExists()
     * Description  Method invoked in addJButton event handler to verify that
     *              the player that's being added exists. Iterates through
     *              players TreeSet and checks if each object is equal the object
     *              passed via paramter.
     * @parem       evt--ActionEvent
     * @author      <i>Leanne Vu</i>
     * Date         1/25/2021
     * </pre>
     *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/ 
    private boolean playerExists(Player name){
        boolean thereIsOne = false;
        
        if ((name != null)) {
            Player aPlayer = null;
            //iterate through the TreeSet to find player searching by names only
            Iterator iterator = players.iterator();
            while (iterator.hasNext() && !thereIsOne) {
                aPlayer = (Player)iterator.next();
                if(aPlayer.equals(name)) { //checks if objects are equal
                    thereIsOne = true;
                }
            }
        }
        return thereIsOne;
    }
    
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>>
     * Method       addJButtonActionPerformed()
     * Description  Event handler for adding a player by invoking the AddPlayer
     *              form. No empty of duplicate player is added (uses playerExists()). 
     *              The new player is added to the TreeSet and saved in the 
     *              Operas.txt file.
     * @parem       evt--ActionEvent
     * @author      <i>Leanne Vu</i>
     * Date         3/5/2021
     * </pre>
     *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/     
    private void addJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addJMenuItemActionPerformed
        try {
            //Invoke AddPlayer form
            AddPlayer add = new AddPlayer(this,true);
            add.setVisible(true);
            
            //This modal dailog takes upon regaining focus
            Player newPlayers = add.getPlayers();
            
            //Check if new player is null or if it already exists by invoking playerExists method
            if (newPlayers != null && !playerExists(newPlayers)){
                //add the new player to the database
                players.add(add.getPlayers());
                displayPlayers();     //refreshes GUI
                
                //loop through players TreeSet database to find index of newly added player
                for (int index = 0 ; index < players.size(); index++){ 
                    //check if any of the players in database matches the returned object
                    if (iterateForName(index).equals(searchPlayer(newPlayers.getName()).getName())) {
                        //highlight the chosen matched object and stop the loop from continuing
                        playersJList.setSelectedIndex(index);
                        break;
                    } 
                }
                    //save the updated TreeSet into the text file
                    savePlayers(fileName);
            } else { //an already existing player will skip on an added creation
                playersJList.setVisible(true);
                playersJList.setSelectedIndex(0);
            }
        }
        catch(NullPointerException nullex){
            JOptionPane.showMessageDialog(null,"Player not added", "Player opera error",
                    JOptionPane.WARNING_MESSAGE);
            playersJList.setVisible(true);
            playersJList.setSelectedIndex(0);
        }
    }//GEN-LAST:event_addJMenuItemActionPerformed

    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>>
     * Method       saveJMenuItemActionperformed()
     * Description  Saves current players in the TreeSet by invoking the
     *              savePlayers() method. 
     * @parem       evt--ActionEvent
     * @author      <i>Leanne Vu</i>
     * Date         3/5/2021
     * </pre>
     *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/    
    private void saveJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveJMenuItemActionPerformed
        savePlayers(fileName);
    }//GEN-LAST:event_saveJMenuItemActionPerformed

    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>>
     * Method       editJButtonActionPerformed()
     * Description  Event handler for editing a player by invoking the EditOperas
     *              form. No empty of duplicate player is added. The edited player
     *              is edited to the TreeSet and saved in the Players.txt file.
     * @parem       evt--ActionEvent
     * @author      <i>Leanne Vu</i>
     * Date         1/25/2021
     * </pre>
     *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/ 
    private void editJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editJMenuItemActionPerformed
        //Edit Player
         try{
             //Invoked the EditOperas form
             //pass player info to EditOperas constructor and view Edit form
            EditPlayer edit = new EditPlayer(this, true);
            edit.setVisible(true);
             
            //This modal dailog takes upon regaining focus
            Player editPlayers = edit.getPlayers();
            
            //get name of the selected players
            String playersName = playersJList.getSelectedValue().toString();
            //double checks to only measure the player name
            if (playersName.contains(","))
                playersName = playersName.substring(0, playersName.indexOf(','));
          
            //create a temp access the object of the selected player
            Player playersToEdit = (searchPlayer(playersName));
            //int index = playersJList.getSelectedIndex();
          
            //get edited player and add to array List
            if (editPlayers != null){
              //remove old player from TreeSet
              players.remove(playersToEdit);
              
              //add edited player to TreeSet
              players.add(edit.getPlayers());
              
              //save players TreeSet to file and display new operas in JList
              savePlayers(fileName);
              displayPlayers();
          }
        }catch( NullPointerException nullex){
            JOptionPane.showMessageDialog(null,"Player not Edit", "Edit Name error",
                    JOptionPane.WARNING_MESSAGE);
            playersJList.setVisible(true);
            playersJList.setSelectedIndex(0);
        }
    }//GEN-LAST:event_editJMenuItemActionPerformed

    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>>
     * Method       deleteJButtonItemActionPerformed()
     * Description  Event handler for deletedJButton to delete selected player.
     *              Removes player to TreeSet, updates the playersJList, and
     *              saves player.
     * @parem       evt ActionEvent
     * @author      <i>Leanne Vu</i>
     * Date         3/5/2021
     * </pre>
     *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/ 
    private void deleteJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteJMenuItemActionPerformed
    //delete selected player, do nothing on No_Option
        //get name of the selected player
        String playersName = playersJList.getSelectedValue().toString();
          //remove age if edit mode is on sorted by name
          if (playersName.contains(","))
              playersName = playersName.substring(0, playersName.indexOf(','));
          
        //create a temp access variable to the selected player
        Player playerToDelete = (searchPlayer(playersName));

        //Pop warning message to double check if user wants to delete
        int result = showConfirmDialog(null, "Are you sure you wish to delete " 
                + playersName + " player?", " DELETE PLAYER", 
        JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);
       
        //checks user option
       if (result == JOptionPane.YES_OPTION){
           players.remove(playerToDelete); //removes player from TreeSet
           displayPlayers(); //updates the playersJList
           savePlayers(fileName); //saves TreeSet to textfile
       } 
    }//GEN-LAST:event_deleteJMenuItemActionPerformed

    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>>
     * Method       detailsJMenuItemActionPerformed()
     * Description  Event handler for displaying player information by invoking
     *              DetailPlayers. Calls the DetailPlayers and passes the
     *              selected player object in TreeSet. 
     * @parem       evt ActionEvent
     * @author      <i>Leanne Vu</i>
     * Date         3/5/2021
     * </pre>
     *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/ 
    private void detailsJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_detailsJMenuItemActionPerformed
        try{
            //find index of selected player to find name, which finds the object
            int index = playersJList.getSelectedIndex();
            if(index >=0) {
            //assign object to player variable 
            Player player = (searchPlayer(iterateForName(index)));
            //pass selected player information into the PlayerDetails which prints known information
            PlayerDetails playerQuote = new PlayerDetails(player);
            playerQuote.setVisible(true);
            }
        }
        catch ( NullPointerException nullex){
            JOptionPane.showMessageDialog(null,"Details error", "Details error",
                    JOptionPane.WARNING_MESSAGE);
            playersJList.setVisible(true);
            playersJList.setSelectedIndex(0);
        }
    }//GEN-LAST:event_detailsJMenuItemActionPerformed

    private void playersJListPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_playersJListPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_playersJListPropertyChange


    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */

        Splash mySplash = new Splash(3000);
        mySplash.showSplash();
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CardGameGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutJMenuItem;
    private javax.swing.JMenuItem addJMenuItem;
    private javax.swing.JLabel betJLabel;
    private javax.swing.JTextField betJTextField;
    private javax.swing.JLabel card1JLabel;
    private javax.swing.JLabel card2JLabel;
    private javax.swing.JButton clearJButton;
    private javax.swing.JMenuItem deleteJMenuItem;
    private javax.swing.JMenuItem detailsJMenuItem;
    private javax.swing.JButton drawJButton;
    private javax.swing.JMenuItem editJMenuItem;
    private javax.swing.JMenuItem exitJMenuItem;
    private javax.swing.JMenu fileJMenu;
    private javax.swing.JMenu helpJMenu;
    private javax.swing.JPanel instructionsJPanel;
    private javax.swing.JScrollPane instructionsJScrollPane;
    private javax.swing.JTextArea instructionsJTextArea;
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JMenuItem newJMenuItem;
    private javax.swing.JMenu playersDatabaseJMenu;
    private javax.swing.JList playersJList;
    private javax.swing.JPanel playersJPanel;
    private javax.swing.JScrollPane playersJScrollPane;
    private javax.swing.JMenuItem printFormJMenuItem;
    private javax.swing.JMenuItem printJMenuItem;
    private javax.swing.JPanel resultsJPanel;
    private javax.swing.JScrollPane resultsJScrollPane;
    private javax.swing.JTextArea resultsJTextArea;
    private javax.swing.JMenuItem saveJMenuItem;
    private javax.swing.JMenuItem searchJMenuItem;
    private javax.swing.JLabel titleJLabel;
    // End of variables declaration//GEN-END:variables
}
